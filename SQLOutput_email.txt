from pyspark.sql import SparkSession
import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# Create a Spark session
spark = SparkSession.builder.appName("DatabaseToExcelAndEmail").getOrCreate()

# Connect to the database and run a query
jdbc_url = "jdbc:postgresql://your_database_host:your_database_port/your_database_name"
properties = {
    "user": "your_username",
    "password": "your_password",
    "driver": "org.postgresql.Driver"
}

query = "SELECT * FROM your_table"
df = spark.read.jdbc(url=jdbc_url, table=query, properties=properties)

# Convert the PySpark DataFrame to a Pandas DataFrame
pandas_df = df.toPandas()

# Export the Pandas DataFrame to an Excel file
excel_file_path = "path/to/your/output/file.xlsx"
pandas_df.to_excel(excel_file_path, index=False)

# Email configuration
sender_email = "your_email@gmail.com"
receiver_email = "recipient_email@gmail.com"
subject = "Data from Database"
body = "Attached is the data exported from the database."

# Create the email message
message = MIMEMultipart()
message["From"] = sender_email
message["To"] = receiver_email
message["Subject"] = subject
message.attach(MIMEText(body, "plain"))

# Attach the Excel file to the email
attachment = open(excel_file_path, "rb")
part = MIMEBase("application", "octet-stream")
part.set_payload((attachment).read())
encoders.encode_base64(part)
part.add_header("Content-Disposition", f"attachment; filename= {excel_file_path}")
message.attach(part)

# Connect to the SMTP server and send the email
smtp_server = "smtp.gmail.com"
smtp_port = 587
smtp_username = "your_email@gmail.com"
smtp_password = "your_email_password"

with smtplib.SMTP(smtp_server, smtp_port) as server:
    server.starttls()
    server.login(smtp_username, smtp_password)
    server.sendmail(sender_email, receiver_email, message.as_string())

# Stop the Spark session
spark.stop()
